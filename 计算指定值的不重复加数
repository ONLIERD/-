import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

/**
 * 输入一个正整数,得到它所有的加法计算结果,加数不重复
 * 例:6 ->输出1,2,3  1,5  2,4  6
 */
public class Demo {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        System.out.println("请输入一个需要计算其和的数");
        int want=scanner.nextInt();
        HashMap<Integer, Integer[]> result = getResult(want);
        for (Integer key:result.keySet()) {
            System.out.println(key+":"+Arrays.toString(result.get(key)));
        }

    }

    public static HashMap<Integer,Integer[]> getResult(int want) {
        HashMap<Integer, Integer[]> result = new HashMap<>();
        ArrayList<Integer> arrayList = new ArrayList<>();
        int start= 1;
        getResult(want,start,arrayList,result);
        return result;
    }

    public static void getResult(int want, int start, ArrayList<Integer> arrayList, HashMap<Integer, Integer[]> result) {
        for (int i = start; i <= want; i++) {
            //将加数放入list
            arrayList.add(i);
            if (want == i) {
                //将列表转化成数组
                //如果用列表进行接收,因为传址的原因,那么所有的结果都会相同
                Integer[] arr = arrayList.toArray(new Integer[0]);
                //将结果放入map中
                //这里用size()+1来记录结果条数,若用int count来计算,因为传值的原因,当getResult返回时,count值也会变成上一个嵌套里count的值
                result.put(result.size()+1, arr);
                ////有一次正确的结果时,从list中移除本次加数
                arrayList.remove(new Integer(i));
            }else if (i < want && want-i>i){
                getResult(want-i,i+1,arrayList,result);
            }

            //从list中移除加数
            //触发条件1:want=i时即有一次正确的结果时,把此次结果的加数删除,此时与上面的remove重复
            //          例: 6时-> 1,2,3已经输出,那么在本次getResult的if (want == i)已经将加数3删除,后面remove重复了,但不影响结果
            //触发条件2:getResult方法返回上一层方法时,需要把这一次的加数删除,因为这种情况下的结果计算完毕,为了i++后不影响后面结果
            //          例: 6时-> 1,2,3已经输出,3的那个getResult方法中已经将3删除,需要将2删除,因为1,2的情况已经完毕,需要i++后对1,3进行运算
            //触发条件3:因为在循环的开始已经将加数放入,如果未满足任何条件则需要将其删除
            //          例: 6时-> 1,3情况下,3并不满足if的条件,那么则将其删除,以便于后面做1,4的情况计算
            arrayList.remove(new Integer(i));
        }
    }
}
